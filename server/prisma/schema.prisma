// Prisma schema for School Management Portal

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  role          String // "Student", "Staff", "Admin"
  student       Student?       @relation(fields: [studentId], references: [id])
  studentId     Int?           @unique
  staff         Staff?         @relation(fields: [staffId], references: [id])
  staffId       Int?           @unique
  notifications Notification[]
  isDeleted     Boolean        @default(false)
  createdAt     DateTime       @default(now())
}

model Student {
  id            Int            @id @default(autoincrement())
  user          User?
  userId        Int?           @unique
  studentId     String         @unique // Unique student identifier
  firstName     String
  lastName      String
  courses       Course[]       @relation("StudentCourses")
  results       Result[]
  department    Department     @relation(fields: [departmentId], references: [id])
  departmentId  Int
  isDeleted     Boolean        @default(false)
  createdAt     DateTime       @default(now())
  registrations Registration[]
}

enum StaffPosition {
  lecturer
  assistant
  professor
  doctor
}

model Staff {
  id              Int           @id @default(autoincrement())
  user            User?
  userId          Int?          @unique
  staffId         String        @unique // Unique staff identifier
  firstName       String
  lastName        String
  position        StaffPosition
  department      Department    @relation(fields: [departmentId], references: [id])
  departmentId    Int // Default to a specific department
  assignedCourses Course[]
  dean            Dean?
  hod             HOD?
  isDeleted       Boolean       @default(false)
  createdAt       DateTime      @default(now())
}

model Faculty {
  id          Int          @id @default(autoincrement())
  name        String
  code        String       @unique
  dean        Dean?
  deanId      Int?         @unique
  departments Department[]
  isDeleted   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
}

model Dean {
  id        Int      @id @default(autoincrement())
  staff     Staff    @relation(fields: [staffId], references: [id])
  staffId   Int      @unique
  faculty   Faculty? @relation(fields: [facultyId], references: [id])
  facultyId Int?     @unique
  isDeleted Boolean  @default(false)

  @@unique([facultyId, staffId])
}

model HOD {
  id           Int         @id @default(autoincrement())
  staff        Staff       @relation(fields: [staffId], references: [id])
  staffId      Int         @unique
  department   Department? @relation(fields: [departmentId], references: [id])
  departmentId Int         @unique
  isDeleted    Boolean     @default(false)
}

model Department {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  code      String    @unique
  HOD       HOD?
  hodId     Int?      @unique
  faculty   Faculty   @relation(fields: [facultyId], references: [id])
  facultyId Int
  courses   Course[]
  students  Student[]
  staffs    Staff[]
  isDeleted Boolean   @default(false)
}

enum CourseSemester {
  FirstSemester
  SecondSemester
  ThirdSemester
  FourthSemester
}

model Course {
  id            Int            @id @default(autoincrement())
  name          String
  code          String         @unique
  credits       Int
  department    Department     @relation(fields: [departmentId], references: [id])
  departmentId  Int
  lecturer      Staff?         @relation(fields: [lecturerId], references: [id])
  lecturerId    Int?
  semester      CourseSemester @default(FirstSemester)
  students      Student[]      @relation("StudentCourses")
  results       Result[]
  isDeleted     Boolean        @default(false)
  createdAt     DateTime       @default(now())
  registrations Registration[]
}

model Registration {
  id                String          @id
  student           Student         @relation(fields: [studentId], references: [id])
  studentId         Int
  courses           Course[]
  academicSession   AcademicSession @relation(fields: [academicSessionId], references: [id])
  academicSessionId Int
  semester          Semester        @relation(fields: [semesterId], references: [id])
  semesterId        Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Result {
  id                Int             @id @default(autoincrement())
  student           Student         @relation(fields: [studentId], references: [id])
  studentId         Int
  course            Course          @relation(fields: [courseId], references: [id])
  courseId          Int
  academicSession   AcademicSession @relation(fields: [academicSessionId], references: [id])
  academicSessionId Int
  semester          Semester        @relation(fields: [semesterId], references: [id])
  semesterId        Int
  score             Float
  grade             String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@unique([studentId, courseId, academicSessionId, semesterId])
}

model AcademicSession {
  id            Int            @id @default(autoincrement())
  name          String         @unique // e.g., "2024/2025"
  semesters     Semester[]
  results       Result[]
  schoolSetting SchoolSetting?
  registrations Registration[]
}

model Semester {
  id                Int             @id @default(autoincrement())
  name              String // e.g., "First Semester", "Second Semester"
  academicSession   AcademicSession @relation(fields: [academicSessionId], references: [id])
  academicSessionId Int
  results           Result[]
  registrations     Registration[]

  @@unique([academicSessionId, name])
}

model SchoolSetting {
  id                       Int              @id @default(autoincrement())
  name                     String
  address                  String
  currentAcademicSessionId Int?             @unique
  currentAcademicSession   AcademicSession? @relation(fields: [currentAcademicSessionId], references: [id])
  semestersPerSession      Int              @default(2)
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Log {
  id        Int         @id @default(autoincrement())
  origin    ErrorOrigin
  details   String?
  ipAddress String?
  userAgent String?
  status    String? // e.g., "Success", "Failure"
  error     String? // Error message if any
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

enum ErrorOrigin {
  client
  server
}

enum TableName {
  user
  student
  staff
  course
  result
  academicSession
  semester
  schoolSetting
  notification
  log
}

model NextId {
  id        Int       @id @default(autoincrement())
  tableName TableName @unique
  nextId    Int
}
